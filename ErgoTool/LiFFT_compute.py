# -*- coding: utf-8 -*-
"""
Created on Sun Oct 16 22:29:26 2016

@author: Rong Huangfu

1206 Notes:  

"""



class MyApp(object):
    def __init__(self, lever_arm, load, rep):
        self.lever_arm = lever_arm
        self.load = load
        self.rep = rep
        
        
        self.lowbackindex = ['0.0000017', '0.0000018', '0.0000019', '0.0000020', '0.0000021', '0.0000022', '0.0000023', '0.0000024', '0.0000025', '0.0000027', '0.0000028', '0.0000029', '0.0000031', '0.0000032', '0.0000034', '0.0000036', '0.0000038', '0.0000040', '0.0000042', '0.0000044', '0.0000046', '0.0000048', '0.0000051', '0.0000053', '0.0000056', '0.0000059', '0.0000062', '0.0000065', '0.0000069', '0.0000072', '0.0000076', '0.0000080', '0.0000084', '0.0000088', '0.0000093', '0.0000097', '0.0000102', '0.0000108', '0.0000113', '0.0000119', '0.0000125', '0.0000132', '0.0000138', '0.0000146', '0.0000153', '0.0000161', '0.0000169', '0.0000178', '0.0000187', '0.0000197', '0.0000207', '0.0000218', '0.0000229', '0.0000241', '0.0000254', '0.0000267', '0.0000281', '0.0000295', '0.0000310', '0.0000327', '0.0000343', '0.0000361', '0.0000380', '0.0000400', '0.0000421', '0.0000443', '0.0000466', '0.0000490', '0.0000516', '0.0000542', '0.0000571', '0.0000600', '0.0000632', '0.0000665', '0.0000700', '0.0000736', '0.0000775', '0.0000815', '0.0000858', '0.0000903', '0.0000950', '0.0001000', '0.0001052', '0.0001107', '0.0001165', '0.0001227', '0.0001291', '0.0001359', '0.0001430', '0.0001505', '0.0001584', '0.0001668', '0.0001755', '0.0001848', '0.0001945', '0.0002047', '0.0002155', '0.0002269', '0.0002388', '0.0002514', '0.0002647', '0.0002787', '0.0002934', '0.0003089', '0.0003252', '0.0003423', '0.0003604', '0.0003795', '0.0003996', '0.0004207', '0.0004430', '0.0004664', '0.0004911', '0.0005171', '0.0005445', '0.0005734', '0.0006037', '0.0006358', '0.0006695', '0.0007050', '0.0007424', '0.0007818', '0.0008234', '0.0008671', '0.0009132', '0.0009617', '0.0010128', '0.0010667', '0.0011235', '0.0011832', '0.0012462', '0.0013126', '0.0013825', '0.0014561', '0.0015337', '0.0016155', '0.0017016', '0.0017924', '0.0018880', '0.0019887', '0.0020949', '0.0022067', '0.0023245', '0.0024487', '0.0025795', '0.0027174', '0.0028626', '0.0030157', '0.0031770', '0.0033469', '0.0035260', '0.0037147', '0.0039136', '0.0041231', '0.0043440', '0.0045767', '0.0048219', '0.0050804', '0.0053527', '0.0056398', '0.0059422', '0.0062610', '0.0065970', '0.0069511', '0.0073242', '0.0077175', '0.0081319', '0.0085688', '0.0090292', '0.0095144', '0.0100258', '0.0105649', '0.0111330', '0.0117318', '0.0123629', '0.0130282', '0.0137293', '0.0144684', '0.0152474', '0.0160685', '0.0169340', '0.0178463', '0.0188079', '0.0198215', '0.0208900', '0.0220163', '0.0232035', '0.0244550', '0.0257742', '0.0271649', '0.0286309', '0.0301762', '0.0318053', '0.0335226', '0.0353329', '0.0372414', '0.0392533', '0.0413742', '0.0436101', '0.0459673']
        
        
        # risk reference list and damage reference list are linked together with same length and in increasing order
        self.risk_reference = ['0.067178273', '0.070114603', '0.073169211', '0.07634597', '0.079648801', '0.083081664', '0.086648554', '0.090353489', '0.094200501', '0.098193628', '0.102336898', '0.106634321', '0.111089872', '0.11570748', '0.120491008', '0.12544424', '0.130570865', '0.135874452', '0.141358438', '0.147026101', '0.152880546', '0.158924674', '0.165161169', '0.171592466', '0.178220733', '0.185047843', '0.192075354', '0.199304477', '0.20673606', '0.21437056', '0.222208017', '0.230248037', '0.238489765', '0.246931867', '0.255572511', '0.26440935', '0.273439504', '0.282659552', '0.292065516', '0.301652859', '0.311416474', '0.32135069', '0.331449267', '0.341705407', '0.352111759', '0.362660436', '0.373343028', '0.384150625', '0.395073841', '0.40610284', '0.417227372', '0.428436805', '0.439720163', '0.451066168', '0.462463284', '0.473899763', '0.485363693', '0.496843044', '0.508325725', '0.519799628', '0.531252683', '0.542672908', '0.554048457', '0.565367674', '0.576619131', '0.587791684', '0.598874504', '0.609857127', '0.620729486', '0.631481943', '0.642105325', '0.652590942', '0.662930618', '0.673116705', '0.6831421', '0.693000255', '0.702685186', '0.712191476', '0.721514275', '0.730649297', '0.739592818', '0.74834166', '0.756893187', '0.765245284', '0.773396345', '0.781345255', '0.78909137', '0.796634493', '0.803974855', '0.811113091', '0.818050216', '0.824787602', '0.831326949', '0.837670268', '0.843819849', '0.849778242', '0.855548232', '0.861132815', '0.866535175', '0.871758665']
        
        self.damage_reference = ['0.00040734', '0.000511549', '0.000702128', '0.000830182', '0.00090075', '0.00095173', '0.001018798', '0.001056622', '0.001095901', '0.001126755', '0.001156223', '0.00118411', '0.00118411', '0.001397787', '0.00142002', '0.001459324', '0.001543527', '0.001574644', '0.001635533', '0.001694281', '0.00174755', '0.001852684', '0.001924389', '0.002000135', '0.002045383', '0.002098134', '0.002240366', '0.002266408', '0.002396686', '0.002448719', '0.002503624', '0.002553952', '0.002700918', '0.002741092', '0.002932895', '0.003103921', '0.003152965', '0.003296514', '0.003347397', '0.003470751', '0.003699289', '0.003789358', '0.00412434', '0.004183228', '0.004761703', '0.004795058', '0.005213055', '0.005696231', '0.006875315', '0.007171335', '0.007930747', '0.008474562', '0.008769511', '0.009484328', '0.010447132', '0.012134293', '0.01250972', '0.012891011', '0.014566098', '0.015486548', '0.019429342', '0.021625556', '0.024092419', '0.029538511', '0.035191116', '0.037901739', '0.038563719', '0.040813001', '0.044223705', '0.047043698', '0.052751262', '0.057211967', '0.064802862', '0.075022145', '0.081505261', '0.110833209', '0.133670997', '0.157389631', '0.178553559', '0.181113888', '0.194461643', '0.242645584', '0.280034243', '0.352112697', '0.516012868', '0.651885628', '0.96729766', '1.107114867', '1.266862179', '1.734132965', '1.915400034', '5.850364138', '8.684081116', '11.63863186', '18.44923715', '28.47942345', '37.74846092', '73.93893371', '468.772785', '33704.85658']
        

    
    # used to calculate cut point based on risk percentage definition (25%, 50%)
    def damage_reference_cal(self, damage_reference_list, risk_reference_list, risk_input):
        d_list = damage_reference_list
        r_list = risk_reference_list
        risk = float(risk_input)
                
        for i in range(len(r_list)):
            
            if risk < float(r_list[i]) and i != 0:
                r_range = float(r_list[i]) - float(r_list[i-1])
                dif_percent = (risk - float(r_list[i-1]))/r_range
                
                d_range = float(d_list[i]) - float(d_list[i-1])
                return_damage = float(d_list[i-1]) + d_range*dif_percent
                break
        return return_damage
 
    
    # used to calculate estimated risk based on total damage of the job
    def risk_reference_cal(self, damage_reference_list, risk_reference_list, damage_input):
        d_list = damage_reference_list
        r_list = risk_reference_list
        damage = float(damage_input)
        
        
        for i in range(len(d_list)):
            
            if damage < float(d_list[i]) and i != 0:
                d_range = float(d_list[i]) - float(d_list[i-1])
                dif_percent = (damage - float(d_list[i-1]))/d_range
                r_range = float(r_list[i]) - float(r_list[i-1])
                return_risk = float(r_list[i-1]) + r_range*dif_percent
                break
      
            elif damage < float(d_list[i]) and i == 0:
                return_risk = float(r_list[0])
                break
        
        return return_risk
   
    def cal(self):
        lever_arm = self.lever_arm 
        load = self.load
        rep = self.rep
        m = round((lever_arm/12 * load), 1)   
        
        if m == 0:
            d_percycle = 0
        elif m > 0 and m < 200:
            index = int(m)
            d_percycle = float(self.lowbackindex[index])   
        elif m >= 200:                                    # over the index limit
            d_percycle = float(self.lowbackindex[-1])  
                    
        task_damge = round((d_percycle * rep), 4)
        


        return m, task_damge

    def damage_to_risk(self, damage):
        task_damge = damage
        if task_damge == 0:
            risk_output = 0

        elif task_damge != 0 and task_damge < float(self.damage_reference[0]):
            risk_output = float(self.risk_reference[0]) * 100
        elif task_damge > float(self.damage_reference[0]):
            risk_output = self.risk_reference_cal(self.damage_reference, self.risk_reference, task_damge) * 100

        risk_output = round(risk_output, 1)

        return risk_output
               
                    
                

          
       
   
